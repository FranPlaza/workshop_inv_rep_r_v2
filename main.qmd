---
title: Investigación Reproducible con R
subtitle: Workshop Ciencia Abierta
format:
  clean-revealjs:
    self-contained: true
author:
  - name: Eloy Alvarado Narváez
    orcid: 0000-0001-7522-2327
    email: eloy.alvarado@usm.cl
    affiliations: Universidad Técnica Federico Santa María
  - name: Francisco Plaza-Vega
    orcid: 0000-0001-7577-2775
    email: francisco.plaza.v@usach.cl
    affiliations: Universidad de Santiago de Chile
date: last-modified
lang: es
bibliography: refs.bib
---

# Módulo 1: Introducción a la Investigación Reproducible {background-color="#40666e"}

## ¿Qué es la Investigación Reproducible?


![](images/reproducibility.jpg){width=70% fig-align="center"}

## Investigación Reproducible

::: box1
Es la práctica de conducir estudios científicos o basados en datos de tal manera que **permita a otros replicar o reproducir los resultados usando los mismos datos, códigos y metodologías**.
:::

::: {.r-stack}
::: {.fragment .fade-in-then-out}
![](images/git_github.png){width=50% fig-align="center"}
:::
::: {.fragment .fade-in-then-out}
![](images/LaTeX_logo.svg.png){width=50% fig-align="center"}
:::
::: {.fragment .fade-in-then-out}

::: {layout-ncol=2}
![](images/R_logo.svg.png){width=30% fig-align="left"}

![](images/RStudio-Logo-Flat.png){width=70% fig-align="right"}
:::
:::

::: {.fragment .fade-in-then-out}
![](images/quarto.png){width=600px fig-align="center"}
:::

::: {.fragment .fade-in-then-out}
![](images/flex.png){width=550px fig-align="center"}
:::

::: {.fragment .fade-in-then-out}
![](images/shiny.png){width=30% fig-align="center"}
:::
:::


## ¿Qué se entiende por un estudio Reproducible y Replicable? 

### Reproducible

> Los autores entregan todos los datos necesarios y los códigos computacionales para realizar el análisis nuevamente, recreando los resultados.

### Replicable

> Un estudio que llega a los mismos hallazgos científicos que otro estudio, recolectando nuevos datos (posiblemente con diferentes métodos) y completando nuevos análisis.


## Clases de Reproducibilidad

- **Reproducibilidad Computacional**: Cuando se proporciona información detallada sobre el código, *software*, *hardware* y detalles de la implementación

- **Reproducibilidad Empírica**: Cuando se proporciona información detallada sobre experimentos y observaciones científicas empíricas no computacionales. En la práctica, esto se ocurre al hacer que los datos y los detalles de cómo se recopilaron estén disponibles de forma gratuita.

- **Reproducibilidad Estadística**: Cuando se proporciona información detallada, por ejemplo, sobre la elección de pruebas estadísticas, parámetros del modelo y valores de umbral. Esto se relaciona principalmente con el registro previo del diseño del estudio para evitar la práctica de *p-value hacking* y otras manipulaciones.


## Reproducibilidad

![](images/reproducible-matrix.jpg){width=70% fig-align="center"}

::: {.notes}
- **Reproducible**: Un resultado es reproducible cuando los mismos pasos de análisis realizados en el mismo conjunto de datos producen consistentemente la misma respuesta.

- **Replicable**: Un resultado es replicable cuando el mismo análisis realizado en diferentes conjuntos de datos produce respuestas cualitativamente similares.

- **Robusto**: un resultado es rebusto cuando el mismo conjunto de datos se somete a diferentes flujos de trabajo de análisis para responder a la misma pregunta de investigación (por ejemplo, una flujo de trabajo escrito en R y otro escrita en Python) y se produce una respuesta cualitativamente similar o idéntica. Los resultados robustos muestran que el trabajo no depende de las especificidades del lenguaje de programación elegido para realizar el análisis.

- **Generalizable**: la combinación de hallazgos replicables y robustos nos permite formar resultados generalizables. Hay que tener en cuenta que ejecutar un análisis en una implementación de software diferente y con un conjunto de datos diferente no proporciona resultados generalizados. Habrá muchos más pasos para saber qué tan bien se aplica el trabajo a todos los diferentes aspectos de la pregunta de investigación. La generalización es un paso importante para comprender que el resultado no depende de un conjunto de datos en particular ni de una versión particular del código de análisis.

:::

## Reproducibilidad

![](images/reproducible-definition-grid.svg){width=70% fig-align="center"}

## Ventajas y dificultades

| Ventajas | Dificultades |
|----|----|
| Historial completo del proyecto | Incentivos limitados |
| Colaboración y Revisión | Sesgo de las investigaciones hacia hallazgos novedosos |
| Evita la desinformación | Mayores estándares |
| Escritura eficiente | Se aplican mayores estándares a las investigaciones reproducibles |
| Reconocimiento justo | No es considerado para las promociones |
| Asegura la continuidad del trabajo |  Variabilidad en el rendimiento de los software utilizados |
| | Que una investigación sea reproducible no significa que esté correcta |
| | Toma más tiempo|



## Etapas de una Investigación Reproducible

![](images/research-cycle.svg){width=70% fig-align="center"}

## Ciencia Abierta

![](images/evolution-open-research.png){width=60% fig-align="center"}

["1.500 scientist lift the lid on reproducibility"](https://www.nature.com/articles/533452a)

::: {.notes}
La ciencia abierta u *open science* tiene por objetivo transformar la investigación haciéndola más reproducible, transparente, reutilizable, colaborativa, responsable y accesible para la sociedad. Para que la investigación sea considerada *abierta*, cada elemento del proceso de investigación debe:

- Estar disponible públicamente: es difícil de usar y beneficiarse del conocimiento oculto detrás de barreras como contraseñas y muros de pago.

- Ser reutilizable: los resultados de la investigación deben tener la licencia adecuada, de modo que los posibles usuarios conozcan las limitaciones de la reutilización.

- Sea transparente: con metadatos apropiados para proporcionar declaraciones claras de cómo se produjo el resultado de la investigación y qué contiene.
:::


## Difusión y citas

![](images/open-access-citations.jpg){width=70% fig-align="center"}

## Datos Abiertos

Solo una proporción muy pequeña de los datos originales se publica en revistas convencionales o investigaciones públicas. A pesar de las políticas existentes sobre el archivo de datos, en la actualidad, los datos se almacenan principalmente en archivos privados, no en repositorios institucionales seguros, y se pierde a ellos por parte del público general.

Esta falta de intercambio de datos es un obstáculo para la investigación internacional (ya sea académica, gubernamental o comercial) por dos razones principales:

- Generalmente es difícil o imposible reproducir un estudio sin los datos originales.

- Los datos no pueden ser reutilizados o incorporados en nuevos trabajos por otros investigadores si no pueden acceder a ellos.

## Barreras para el intercambio de datos

![](images/data-privacy.png){width=70% fig-align="center"}

::: {.notes}
Muchos investigadores encuentran difícil compartir datos. Encuestas recientes realizadas entre investigadores enumeran las siguientes razones:

- Organizar los datos de una manera presentable y útil es un desafío (mencionado por el 46 %)

- Los investigadores no están seguros acerca de los derechos de autor y las licencias (mencionado por el 37 %)

- Los investigadores no saben qué repositorio usar para diferentes tipos de datos (aumento del 33 %)

:::

## Software de Código abierto

> Cuando un proyecto es de código abierto, cualquiera puede ver, usar, modificar y distribuir el proyecto para cualquier propósito. Estos permisos se aplican a través de una licencia de código abierto

**¿Cómo los software de código abierto benefician la investigación?**



::::{.columns}

:::{.column}

- **Re-usable**

- **Comprobable**

- **Colaborativo**

:::

:::{.column}

![](images/tidylogo.png){width=60% fig-align="center"}
:::
::::



## Espectro de Reproducibilidad

![](images/Reproducible.png){width=60% fig-align="center"}


# Sofware necesarios

## R project

![](images/R_logo.svg.png){width=40% fig-align="center"}

[https://cran.dcc.uchile.cl/](https://cran.dcc.uchile.cl/)

## RSudio IDE

![](images/RStudio-Logo-Flat.png){width=60% fig-align="center"}

[https://posit.co/download/rstudio-desktop/](https://posit.co/download/rstudio-desktop/)

> Existen otras alternativas más *génericas* como [Visual Studio Code](https://code.visualstudio.com/), un editor de código para múltiples lenguajes. Sin embargo, al no ser un software especializado en R, requiere utilizar extensiones para lograr las funcionalidad que otorga RStudio.

## Quarto

![](images/quarto.png){width=60% fig-align="center"}

[https://quarto.org/docs/get-started/](https://quarto.org/docs/get-started/)

## Git & Github

![](images/git_github.png){width=45% fig-align="center"}

- [Git](https://git-scm.com/downloads)

- [Github CLI](https://cli.github.com/)

- [Github Desktop](https://desktop.github.com/)

- [Repositorio para este curso](https://github.com/ealvnrz/workshop_inv_rep_r)


# Módulo 2: Control de versiones {background-color="#40666e"}

## Conectar RStudio y Github

1. Crear una cuenta en [GitHub](https://github.com/)
2. Crear un token de acceso personal (PAT) en GitHub

. . .

```{r}
#| echo: true
#| eval: false
library(usethis)
create_github_token()
```
3. Almacenar credenciales

. . .

```{r}
#| echo: true
#| eval: false
library(gitcreds)
gitcreds::gitcreds_set()
```

## RStudio 

1. Tener un proyecto local
2. Realizar un *commit* inicial
3. Escribir:

. . .

```{r}
#| echo: true
#| eval: false
library(usethis)
usethis::use_github()
```
Esto creará un repositorio con el nombre del proyecto

4. Utilizando la interface en RStudio, podremos mantener el control de versiones.

## Control de versiones para datos

![](images/data-provenance.jpg){width=60% fig-align="center"}

## Importancia del control de versiones para datos

- Los datos utilizados en los análisis **no son estáticos**

- Los datos pueden mutar **no sólo** debido a que se ingresa nueva información

- En muchas investigaciones se desea experimentar con diferentes versiones del mismo conjunto de datos

- Controlar las versiones de conjuntos de datos o de archivos grandes ayuda a la reproducibilidad de un proyecto

## Desafíos en el control de versiones para datos

La principal limitación que tiene [Git](https://git-scm.com/) es que conforme la cantidad y tamaño de los archivos en el proyecto crecen, se vuelve impracticable el control de versiones.

- Usualmente un repositorio se considera *grande* cuando su tamaño es sobre 1 TB

## Herramientas en el control de versiones para datos

Entre las herramientas más usadas para el control de versiones para grandes archivos están:

- [Data Version Control](https://dvc.org/): Particularmente útil cuando se trabaja con muchos modelos, pues puede registrar el desempeño de modelos pre-establecidos *commit* tras *commit*.

. . .

![](images/dvc.png){width=25% fig-align="center"}

- [Git Large File Storage](https://git-lfs.com/): Tal como Git, pero desarrollado para ser escalable.

. . .

![](images/glfs.png){width=40% fig-align="center"}

## Administración de datos de investigación

> El estándar para investigaciones reproducibles es que los datos cumplan con los principios **FAIR**


![](images/data-ecosystem.svg){width=40% fig-align="center"}

## FAIR

["The FAIR Guiding Principles for scientific data management and stewardship"](https://www.nature.com/articles/sdata201618)

![](images/fair-principles.svg){width=40% fig-align="center"}

:::{.notes}
Localizable: ¡El primer paso para (re)utilizar datos es encontrarlos! Los metadatos descriptivos (información sobre los datos, como palabras clave) son esenciales.

Accesible: una vez que el usuario encuentra los datos y el software, necesita saber cómo acceder a ellos. Los datos podrían estar disponibles abiertamente, pero también es posible que sean necesarios procedimientos de autenticación y autorización.

Interoperable: los datos deben integrarse con otros datos e interoperar con aplicaciones o flujos de trabajo.

Reutilizable: los datos deben estar bien descritos para que puedan usarse, combinarse y ampliarse en diferentes entornos.
:::

# Ambientes reproducibles

Cada computador es un ambiente computacional **único** que consiste de un sistema operativo, los *softwares* instalados, sus respectivas versiones entre otras características.

. . .

::: box1
Supongamos que un proyecto de investigación se lleva a cabo en un computador pero luego se transfiere a un computador diferente. No habrá una garantía que el análisis podrá ser realizado o que generará los mismos resultados si estos dependen de algunas de las características mencionadas.
:::

**Para que una investigación sea reproducible, el ambiente computacional en el que se conduce debe poder ser replicado.**

## ¿Qué es un ambiente computacional?

> En términos generales, un ambiente computacional es un sistema donde un programa se ejecuta. Esto incluye las características de *hardware* y *software*

Replicar los ambientes computacionales tendrá un potencial impacto en:

- Investigadores

- Colaboradores

. . .

![](images/piramid.png){width=40% fig-align="center"}

## Capturando el ambiente computacional

### Categorías:

![](images/computational-environments.jpg){width=60% fig-align="center"}

## Sistema de admininistración de paquetes

::: box3
Los sistemas de administración de paquetes son herramientas usadas para instalar y mantener un seguimiento del software usado en un sistema. Los archivos utilizados pueden ser compartidos con otros para que repliquen el ambiente computacional.
:::

Ejemplos: 

- [Conda](https://conda.io/)
- [Posit Package Manager](https://posit.co/products/enterprise/package-manager/)
- [Metrum Package Network](https://mpn.metworx.com/docs/) via [pkgr](https://github.com/metrumresearchgroup/pkgr)
- [Packrat](https://rstudio.github.io/packrat/)
- [Renv](https://rstudio.github.io/renv/articles/renv.html)

## Binder

::: box3
Binder es un servicio que genera versiones funcionales de proyecto desde un **repositorio git** y los sube a la nube. Estos proyectos "binderizados" son accesibles desde un navegador de internet.
:::

Binder requiere que el software (y óptimamente, sus versiones) necesario para ejecutar un proyecto sea especificado.

![](images/featured.png){width=60% fig-align="center"}


## Máquinas virtuales

::: box3
Las máquinas virtuales son **computadores simulados**. Un usuario puede crear un computador *"virtual"* fácilmente, especificando el sistema operativo que quieren tener, entre otras características, y ejecutarlo como cualquier otra aplicación.
:::

![](images/Virtualbox_logo.png){width=30% fig-align="center"}

## Contenedores

::: box3 
Los contenedores proveen muchos de los beneficios de una máquina virtual, pues esencialmente actúan como máquinas independientes que contienen sus propios archivos, *softwares* y configuraciones.

La diferencia radica en que una máquina virtual incluye un sistema operativo junto con sus *softwares*, independientemente si el proyecto los utiliza. En cambio, los contenedores sólo incluyen el *software* y archivos explícitamente definidos para ejecutar un proyecto particular.
:::

![](images/docker-logo.png){width=30% fig-align="center"}

## Ejemplos: Renv

1. Creamos un nuevo proyecto
2. Seleccionamos la opción de utilizar `renv` en el nuevo proyecto
3. Alternativamente podemos utilizar el comando `renv::init()` para proyectos existentes
4. Trabajamos en el código, instalando o sacando paquetes conforme sea necesario
5. Usamos el comando `renv::snapshot()` para capturar el ambiente

- El comando `renv::init()` tendremos opciones para restaurar, descartar o activar el ambiente computacional
- El comando `renv::dependencies()` nos entrega los paquetes de los cuales depende nuestro proyecto.


## Ejemplos: Conda

1. Instalar [Anaconda](https://www.anaconda.com/)
2. Seleccionar pestaña *Environment*
3. Crear ambiente de proyecto (R, Python o ambos)
4. Utilizar RStudio desde anaconda.

. . .

![](images/Anaconda_Logo_RGB_Corporate_stacked_300x225_2x-1.png){width=40% fig-align="center"}

## Ejemplos: BinderHub

![](images/binderhub.svg){width=60% fig-align="center"}

## Pasos para crear un ambiente en BinderHub

1. [Entrar a Binder](https://mybinder.org/)
2. Crear un repositorio usando el siguiente *template*: [binder-r](https://github.com/binder-examples/r)
3. Subir archivos al repositorio.
4. Modificar archivo `install.R` con los paquetes necesarios
5. Modificar `runtime.txt` con la versión de R necesaria
  - Para ver la versión de R con la que se está trabajando: `version` en la consola de 
6. Modificar `README.md` con la dirección del repositorio, por ejemplo:

. . .

:::{.frament}
`http://mybinder.org/v2/gh/binder-examples/r/master?urlpath=rstudio` 

cambia a

`http://mybinder.org/v2/gh/ealvnrz/binder-r-test/master?urlpath=rstudio`
:::

## YAML

> YAML es un formato de *serialización* de datos que puede ser leído fácilmente. Su uso es amplio, desde Acciones en GitHub hasta Quarto

Un ejemplo de YAML que difine un **ambiente computacional** podría ser:

```
# Define the operating system as Linux
os: linux

# Use the xenial distribution of Linux
dist: xenial

# Use the programming language Python
language: python

# Use version of Python 3.2
python: 3.2

```

::: box3
YAML nos será de particular interés para la creación de documentos y presentaciones reproducibles, utilizando quarto.
:::

## Caso práctico

::: box1

Generaremos un proyecto desde cero que tenga las siguientes características:

- Repositorio en Github
- Código de R + Administrador de paquetes

:::



