---
title: Investigación Reproducible con R
subtitle: Workshop Ciencia Abierta
format:
  clean-revealjs:
    self-contained: true
author:
  - name: Eloy Alvarado Narváez
    orcid: 0000-0001-7522-2327
    email: eloy.alvarado@usm.cl
    affiliations: Universidad Técnica Federico Santa María
  - name: Francisco Plaza-Vega
    orcid: 0000-0001-7577-2775
    email: francisco.plaza.v@usach.cl
    affiliations: Universidad de Santiago de Chile
date: last-modified
lang: es
bibliography: refs.bib
---

# Módulo 1: Introducción a la Investigación Reproducible {background-color="#40666e"}

## ¿Qué es la Investigación Reproducible?


![](images/reproducibility.jpg){width=70% fig-align="center"}

## Investigación Reproducible

::: box1
Es la práctica de conducir estudios científicos o basados en datos de tal manera que **permita a otros replicar o reproducir los resultados usando los mismos datos, códigos y metodologías**.
:::

::: {.r-stack}
::: {.fragment .fade-in-then-out}
![](images/git_github.png){width=50% fig-align="center"}
:::
::: {.fragment .fade-in-then-out}
![](images/LaTeX_logo.svg.png){width=50% fig-align="center"}
:::
::: {.fragment .fade-in-then-out}

::: {layout-ncol=2}
![](images/R_logo.svg.png){width=30% fig-align="left"}

![](images/RStudio-Logo-Flat.png){width=70% fig-align="right"}
:::
:::

::: {.fragment .fade-in-then-out}
![](images/quarto.png){width=600px fig-align="center"}
:::

::: {.fragment .fade-in-then-out}
![](images/flex.png){width=550px fig-align="center"}
:::

::: {.fragment .fade-in-then-out}
![](images/shiny.png){width=30% fig-align="center"}
:::
:::


## ¿Qué se entiende por un estudio Reproducible y Replicable? 

### Reproducible

> Los autores entregan todos los datos necesarios y los códigos computacionales para realizar el análisis nuevamente, recreando los resultados.

### Replicable

> Un estudio que llega a los mismos hallazgos científicos que otro estudio, recolectando nuevos datos (posiblemente con diferentes métodos) y completando nuevos análisis.


## Clases de Reproducibilidad

- **Reproducibilidad Computacional**: Cuando se proporciona información detallada sobre el código, *software*, *hardware* y detalles de la implementación

- **Reproducibilidad Empírica**: Cuando se proporciona información detallada sobre experimentos y observaciones científicas empíricas no computacionales. En la práctica, esto se ocurre al hacer que los datos y los detalles de cómo se recopilaron estén disponibles de forma gratuita.

- **Reproducibilidad Estadística**: Cuando se proporciona información detallada, por ejemplo, sobre la elección de pruebas estadísticas, parámetros del modelo y valores de umbral. Esto se relaciona principalmente con el registro previo del diseño del estudio para evitar la práctica de *p-value hacking* y otras manipulaciones.


## Reproducibilidad

![](images/reproducible-matrix.jpg){width=70% fig-align="center"}

::: {.notes}
- **Reproducible**: Un resultado es reproducible cuando los mismos pasos de análisis realizados en el mismo conjunto de datos producen consistentemente la misma respuesta.

- **Replicable**: Un resultado es replicable cuando el mismo análisis realizado en diferentes conjuntos de datos produce respuestas cualitativamente similares.

- **Robusto**: un resultado es rebusto cuando el mismo conjunto de datos se somete a diferentes flujos de trabajo de análisis para responder a la misma pregunta de investigación (por ejemplo, una flujo de trabajo escrito en R y otro escrita en Python) y se produce una respuesta cualitativamente similar o idéntica. Los resultados robustos muestran que el trabajo no depende de las especificidades del lenguaje de programación elegido para realizar el análisis.

- **Generalizable**: la combinación de hallazgos replicables y robustos nos permite formar resultados generalizables. Hay que tener en cuenta que ejecutar un análisis en una implementación de software diferente y con un conjunto de datos diferente no proporciona resultados generalizados. Habrá muchos más pasos para saber qué tan bien se aplica el trabajo a todos los diferentes aspectos de la pregunta de investigación. La generalización es un paso importante para comprender que el resultado no depende de un conjunto de datos en particular ni de una versión particular del código de análisis.

:::

## Reproducibilidad

![](images/reproducible-definition-grid.svg){width=70% fig-align="center"}

## Ventajas y dificultades

| Ventajas | Dificultades |
|----|----|
| Historial completo del proyecto | Incentivos limitados |
| Colaboración y Revisión | Sesgo de las investigaciones hacia hallazgos novedosos |
| Evita la desinformación | Mayores estándares |
| Escritura eficiente | Se aplican mayores estándares a las investigaciones reproducibles |
| Reconocimiento justo | No es considerado para las promociones |
| Asegura la continuidad del trabajo |  Variabilidad en el rendimiento de los software utilizados |
| | Que una investigación sea reproducible no significa que esté correcta |
| | Toma más tiempo|



## Etapas de una Investigación Reproducible

![](images/research-cycle.svg){width=70% fig-align="center"}

## Ciencia Abierta

![](images/evolution-open-research.png){width=60% fig-align="center"}

["1.500 scientist lift the lid on reproducibility"](https://www.nature.com/articles/533452a)

::: {.notes}
La ciencia abierta u *open science* tiene por objetivo transformar la investigación haciéndola más reproducible, transparente, reutilizable, colaborativa, responsable y accesible para la sociedad. Para que la investigación sea considerada *abierta*, cada elemento del proceso de investigación debe:

- Estar disponible públicamente: es difícil de usar y beneficiarse del conocimiento oculto detrás de barreras como contraseñas y muros de pago.

- Ser reutilizable: los resultados de la investigación deben tener la licencia adecuada, de modo que los posibles usuarios conozcan las limitaciones de la reutilización.

- Sea transparente: con metadatos apropiados para proporcionar declaraciones claras de cómo se produjo el resultado de la investigación y qué contiene.
:::


## Difusión y citas

![](images/open-access-citations.jpg){width=70% fig-align="center"}

## Datos Abiertos

Solo una proporción muy pequeña de los datos originales se publica en revistas convencionales o investigaciones públicas. A pesar de las políticas existentes sobre el archivo de datos, en la actualidad, los datos se almacenan principalmente en archivos privados, no en repositorios institucionales seguros, y se pierde a ellos por parte del público general.

Esta falta de intercambio de datos es un obstáculo para la investigación internacional (ya sea académica, gubernamental o comercial) por dos razones principales:

- Generalmente es difícil o imposible reproducir un estudio sin los datos originales.

- Los datos no pueden ser reutilizados o incorporados en nuevos trabajos por otros investigadores si no pueden acceder a ellos.

## Barreras para el intercambio de datos

![](images/data-privacy.png){width=70% fig-align="center"}

::: {.notes}
Muchos investigadores encuentran difícil compartir datos. Encuestas recientes realizadas entre investigadores enumeran las siguientes razones:

- Organizar los datos de una manera presentable y útil es un desafío (mencionado por el 46 %)

- Los investigadores no están seguros acerca de los derechos de autor y las licencias (mencionado por el 37 %)

- Los investigadores no saben qué repositorio usar para diferentes tipos de datos (aumento del 33 %)

:::

## Software de Código abierto

> Cuando un proyecto es de código abierto, cualquiera puede ver, usar, modificar y distribuir el proyecto para cualquier propósito. Estos permisos se aplican a través de una licencia de código abierto

**¿Cómo los software de código abierto benefician la investigación?**



::::{.columns}

:::{.column}

- **Re-usable**

- **Comprobable**

- **Colaborativo**

:::

:::{.column}

![](images/tidylogo.png){width=60% fig-align="center"}
:::
::::



## Espectro de Reproducibilidad

![](images/Reproducible.png){width=60% fig-align="center"}


# Sofware necesarios

## R project

![](images/R_logo.svg.png){width=40% fig-align="center"}

[https://cran.dcc.uchile.cl/](https://cran.dcc.uchile.cl/)

## RSudio IDE

![](images/RStudio-Logo-Flat.png){width=60% fig-align="center"}

[https://posit.co/download/rstudio-desktop/](https://posit.co/download/rstudio-desktop/)

> Existen otras alternativas más *génericas* como [Visual Studio Code](https://code.visualstudio.com/), un editor de código para múltiples lenguajes. Sin embargo, al no ser un software especializado en R, requiere utilizar extensiones para lograr las funcionalidad que otorga RStudio.

## Quarto

![](images/quarto.png){width=60% fig-align="center"}

[https://quarto.org/docs/get-started/](https://quarto.org/docs/get-started/)

## Git & Github

![](images/git_github.png){width=45% fig-align="center"}

- [https://git-scm.com/downloads](Git)

- [https://cli.github.com/](Github CLI)

- [https://desktop.github.com/](Github Desktop)



## Example slide

### This is a subtitle

Before we dive a bit deeper, here is a simple example of the
[clean theme](https://github.com/grantmcdermott/quarto-revealjs-clean)
in action. 

- No pictures or anything fancy. Just text for the moment.

Next, we'll take a brief tour of some theme components.

- We'll use the same basic
structure as the
[original LaTeX slides](https://raw.githack.com/kylebutts/templates/master/latex-slides/auxiliary/slides.pdf).
- Note that the [_full suite_](https://quarto.org/docs/presentations/revealjs/)
of Reveal.js features are available for this Quarto implementation,
even if we don't cover everything here.


## Before you proceed...

### Requirements for the coding examples in this demo

:::{.callout-note}
## R libraries

While the clean theme is language agnostic, we will use several R coding
examples in this demo to highlight some advanced theme features.

You will need the following libraries if you'd like to render the template
"as-is":

```{.r}
123
```
:::


:::{.callout-note}
## TinyTex

While reveal.js presentations are HTML format, we will show an example of how to 
embed LaTeX tables as images. This requires a working Tex distribution, of which
TinyTex provides by far the easiest and lightest integration with Quarto. More
details [here](https://quarto.org/docs/output-formats/pdf-engine.html).

```{.bash}
quarto install tinytex
```
:::

# Components {background-color="#40666e"}

## Components

### Ordered and Unordered Lists

Here we have an unordered list.

- first item
    - sub-item
- second item

And next we have an ordered one.

1. first item
    i) sub-item
2. second item

## Components

### Alerts & Cross-refs {#sec-crossref}

To emphasize specific words or text, you can:

- Use the default `.alert` class, e.g. [important note]{.alert}.
- Use the `.fg` class for custom colour, e.g. [important note]{.fg style="--col: #e64173"}.
- Use the `.bg` class for custom background, e.g. [important note]{.bg style="--col: #e64173"}.

To cross-reference, you have several options, for example:

- Beamer-like `.button` class provided by this theme, e.g. [[Appendix]{.button}](#sec-appendix)
- Quarto's native cross-ref syntax, e.g., "See @sec-appendix."

## Components

### Citations

Citations follow the standard
[Quarto format](https://quarto.org/docs/authoring/footnotes-and-citations.html#citations)
and be sourced from BibLaTex, BibTeX, or CLS files. For example:

 - [Topic 1:]{.alert} Spatial Frictions [@Fajgelbaum_Morales_Serrato_Zidar_2018; @Hsieh_Moretti_2019; @Moretti_2011]

- [Topic 2:]{.alert} Blah [@Suárez_Serrato_Zidar_2016]

## Components

### Blocks

Quarto provides
[dedicated environments](https://quarto.org/docs/authoring/cross-references.html#theorems-and-proofs)
for theorems, lemmas, and so forth. 

But in presentation format, it's arguably more effective just to use a
[Callout Block](https://quarto.org/docs/authoring/callouts.html).

:::{.callout-note}
## Regression Specification

The main specification is as follows:

$$
y_{it} = X_{it} \beta + \mu_i + \varepsilon_{it}
$$
:::

## Components

### Multicolumn I: Text only

:::: {.columns}

::: {.column width="50%"}
#### Column 1

Here is a long sentence that will wrap onto the next line as it hits the column
width, and continue this way until it stops.
:::

::: {.column width="50%"}
#### Column 2

Some other text in another column.

A second paragraph.
:::

::::

Multicolumn support is very flexible and we can continue with a single full
span column in the same slide.

## Components

### Multicolumn II: Text and figures

:::: {.columns}

::: {.column width="50%"}
![](images/kanagawa.jpg)
:::

::: {.column width="50%"}

- A point about the figure that is potentially important.
- Another point about the figure that is also potentially important.
:::

::::

Note that sub- and multi-panel figures are also natively supported by Quarto.
See [here](https://quarto.org/docs/authoring/figures.html#subfigures).

## Components

### Multicolumn III: Code and output

```{r}
#| echo: true
#| label: fig-pairs
#| fig-cap: "Pairwise scatterplot" 
#| fig-asp: 1
#| output-location: column


```

# Tables {background-color="#40666e"}

## Tables

### Regression example

Quarto offers excellent
[table support](https://quarto.org/docs/authoring/tables.html),
with further customization via user libraries. Let's illustrate with a
regression example:

```{r}
#| echo: true

library(fixest)

mods = feols(
  rating ~ complaints + privileges + learning + csw0(raises + critical) + advance,
  data = attitude
)

dict = c("rating"     = "Overall Rating",
         "complaints" = "Handling of Complaints",
         "privileges" = "No Special Priviledges",
         "learning"   = "Opportunity to Learn",
         "raises"     = "Performance-Based Raises",
         "critical"   = "Too Critical",
         "advance"    = "Advancement")
```

## Regression table

### modelsummary

If you use `modelsummary` with this Quarto theme, we advise setting the `gt`
backend for a cleaner aesthetic. More details
[here](https://vincentarelbundock.github.io/modelsummary/articles/appearance.html).

```{r}
#| echo: true
#| output-location: slide


```

## Regression table

### etable

`fixest`'s powerful native tabling functions were designed for LaTeX output. But we
can use the `markdown = TRUE` option to make them work with this theme too. 
(Details
[here](https://lrberge.github.io/fixest/articles/etable_new_features.html).) Quick notes:

 - Install the `tinytex` & `pdftools` packages first.
 - Set the R chunk option `output: asis`. 

````
```{{r}}
#| output: asis

setFixest_etable(markdown = TRUE, drop = "Constant")
setFixest_dict(dict)

etable(mods, highlight = .("se" = "complaints"))
```
````

## Regression table

### etable (cont.)

```{r}
#| output: asis


```

# Figures {background-color="#40666e"}

## Figure

![](images/kanagawa.jpg)

## Figure

### Full-size Figures

You can use the `{.background-image}` container environment to completely fill
the slide background with an image.

Ideally, your figure will be the same aspect ratio as the screen that you're presenting on.

- This can be a bit tricky because of the dynamic nature of reveal.js / HTML. But it's probably something close to 16:9.
- Aspect ratio can also matter for a regular full-frame images (previous slide).

## {background-image="images/kanagawa169.jpg" background-size="100%"}

## Interactive plots

```{r}
#| out-width: 75%

library(threejs)

# Approximate locations as factors
data(flights)
dest = factor(sprintf("%.2f:%.2f", flights[,3], flights[,4]))

# A table of destination frequencies
freq = sort(table(dest), decreasing=TRUE)

# The most frequent destinations in these data
frequent_destinations = names(freq)[1:10]

# Subset the flight data by destination frequency
idx = dest %in% frequent_destinations
frequent_flights = flights[idx, ]

# Lat/long and counts of frequent flights
ll = unique(frequent_flights[, 3:4])

# Plot frequent destinations as bars, and the flights to and from
# them as arcs. Adjust arc width and color by frequency.
globejs(lat=ll[, 1], long=ll[, 2], arcs=frequent_flights,
        # bodycolor="#aaaaff", arcsHeight=0.3, arcsLwd=2,
        bodycolor="#fff", arcsHeight=0.3, arcsLwd=2,
        arcsColor="#ffff00", arcsOpacity=0.15,
        atmosphere=TRUE, color="#fff", pointsize=0.5)
```

_Note: Simple flight data example using `threejs`. There are many interactive
plotting options beyond this.
(More [details](https://quarto.org/docs/interactive/).)_

# Summary {background-color="#40666e"}

## Summary

### A minimal and elegant presentation theme


The Quarto reveal.js [clean theme](grantmcdermott/quarto-revealjs-clean) aims to
be a minimal and elegant presention theme.

We have highlighted some theme-specific components. But all of the regular reveal.js functionality is supported ([chalkboard](https://quarto.org/docs/presentations/revealjs/presenting.html#chalkboard), etc.)

Install the theme:

```{.bash}
quarto install extension grantmcdermott/quarto-revealjs-clean
```

Use these demo slides as a template:

```{.bash}
quarto use template grantmcdermott/quarto-revealjs-clean-demo
```

## References

::: {#refs}
:::

## Appendix {#sec-appendix}

```{r}
#| label: tbl-attsum
#| tbl-cap: Summary of the base R `attitude` dataset

modelsummary::datasummary_skim(attitude)
```

[[Back to main]{.button}](#sec-crossref)
